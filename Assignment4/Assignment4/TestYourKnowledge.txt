1. Describe the problem generics address.
   - Generics address the problem of code duplication and type safety. They allow you to create classes, methods, and data structures that can operate on any data type while providing compile-time type checking, reducing the need for casting and improving code reusability and performance.

2. How would you create a list of strings, using the generic List class?
   - List<string> stringList = new List<string>();

3. How many generic type parameters does the Dictionary class have?
   - The Dictionary class has two generic type parameters: Dictionary<TKey, TValue>.

4. True/False. When a generic class has multiple type parameters, they must all match.
   - False. Each type parameter can be different and specified independently.

5. What method is used to add items to a List object?
   - The Add method is used to add items to a List object, e.g., list.Add(item);

6. Name two methods that cause items to be removed from a List.
   - Remove(item) and RemoveAt(index).

7. How do you indicate that a class has a generic type parameter?
   - By using angle brackets (<>) with the type parameter, e.g., public class MyClass<T>.

8. True/False. Generic classes can only have one generic type parameter.
   - False. Generic classes can have multiple type parameters, e.g., public class MyClass<T1, T2>.

9. True/False. Generic type constraints limit what can be used for the generic type.
   - True. Constraints can specify that a type parameter must be a reference type, value type, or implement a specific interface, etc.

10. True/False. Constraints let you use the methods of the thing you are constraining to.
    - True. By using constraints, you can ensure that the generic type has certain methods or properties, allowing you to use those methods or properties within the generic class or method.
